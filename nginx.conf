# main settings 全局配置
#user  nobody; # 指定nginx运行的用户和用户组，默认nobody
worker_processes  2; # 指定工作衍生的进程数，一般和逻辑cpu核数一致

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid; # 指定进程id存储文件位置


events {
    use kqueue; # 使用i/o模型，linux使用epoll,freebsd推荐kqueue
    worker_connections  1024; # 定义每个nginx进程打开最多文件描述符数目
}

# http settings
http {
    # http服务器全局配置,一个http可以配置多个server
    include       mime.types; # 主模块指令，实现对配置文件所包含的文件的设定，可以减少主配置文件的复杂度，DNS主配置文件中的zonerfc1912，acl基本上都是用的include语句
    default_type  application/octet-stream; # 核心模块指令，这里默认设置为二进制流，也就是当文件类型未定义时使用这种方式 
    # log 模块
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /Users/TToo/logs/access.log  main; # 引用日志main

    sendfile        on; # 开启高效文件传输模式
    tcp_nopush     on; # 开启防止网络阻塞
    #tcp_nodelay; # 开启防止网络阻塞

    keepalive_timeout  0;
    #keepalive_timeout  65; # 设置客户端连接保存活动的超时时间
    #client_header_timeout 10; //用于设置客户端请求读取超时时间
    #client_body_timeout 10; //用于设置客户端请求主体读取超时时间
    #send_timeout 10; //用于设置相应客户端的超时时间

    # httpGip 模块设置
    gzip  on; # 开启gzip压缩
    #gzip_min_length 1k;  //设置允许压缩的页面最小字节数
    #gzip_buffers 4 16k; //申请4个单位为16K的内存作为压缩结果流缓存
    #gzip_http_version 1.1; //设置识别http协议的版本,默认是1.1
    #gzip_comp_level 2; //指定gzip压缩比,1-9 数字越小,压缩比越小,速度越快.
    #gzip_types text/plain text/css application/javascript text/javascript application/x-javascript text/xml application/xml application/xml+rss application/json image/x-icon image/png image/jpg image/jpeg application/font-woff; //指定压缩的类型
    #gzip_vary on; //前端的缓存服务器存经过gzip压缩的页面

    # server主机设置
    server { # 配置一个站点
        listen       8080; # 监听端口8080
        server_name  localhost; # 设置主机域名
        rewrite ^(.*) http://localhost$1 permanent; # 重定向

        charset UTF-8; # 设置访问语言编码

        #access_log  logs/host.access.log  main; # 设置虚拟主机访问日志的存放及日志的格式为main
        #location # url路由匹配设置
        location / { # 设置虚拟主机的基本信息
            root   /Users/TToo; # 设置虚拟主机的网站根目录
            index  index.html index.htm /Users/TToo/index.html; # index模块，设置虚拟主机默认访问的网页
           #include uwsgi_params; # load uwsgi
           #uwsgi_pass 127.0.0.1:9090;

        }
        #访问ip控制
        location /admin/ {
        allow 192.168.1.1; # 允许ip通过，allow放置在前面
        deny all; # 禁止其他ip
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
